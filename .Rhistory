library(openxlsx)
library(nloptr)
## Energy requirement
# NEm: net energy for maintenance
BCS = 3.5  # Body condition score
BW = 600  # Body weight, kg
parity = 2
IBW = BW/(0.65 + 0.1*BCS)  # Ideal body weight
NEm = 0.10 * IBW^0.75  # NEl equivalence, Mcal
#NEl: net energy for lactation
TP_Milk = 3.2 * 0.951 # Milk true protein content, %
Fat_Milk = 3.5 # Milk fat content, %
Lactose_Milk = 4.85 # Milk lactose content, %
Milk = 35  #Milk production, kg
NEl = Milk * (9.29*Fat_Milk + 5.85*TP_Milk + 3.95*Lactose_Milk)/100  # Mcal/d
# NEact: net energy for activity
Type = 'Barn'  # Farming type, barn or pasture
DHD = 1.6  # Daily horizontal distance, km
DVD = 0.1  # Daily vertical distance, km
if(Type == 'Barn'){
NEact = (DHD*0.35*BW + DVD*5*BW)/1000  # NEl equivalence, Mcal/d
} else if(Type == 'Pasture'){
Concentrate = 6  # Concentrate fed per day, kg
NEact = (DHD*0.35*BW + DVD*5*BW + 10*(BW^0.75)*((600 - 12*Concentrate)/600))/1000
}
# NEpreg: net enrgy for pregnancy
DOP = 30  # day of pregnancy
CBW = 45  # calf birth weight
if(DOP < 190){
NEpreg = 0
} else if(DOP >= 190 & DOP <= 279){
NEpreg = (0.00318*DOP - 0.0352)*(CBW/45)/0.218  # NEl equivalence, Mcal/d
} else {
NEpreg = (0.00318*279 - 0.0352)*(CBW/45)/0.218
}
# NEbw: net energy for body weight change
CI = 390 # Calving interval
TCWcoe = c(0.85, 0.92, 0.96, 1, 1, 1, 1, 1, 1, 1) # Target calving weight coefficient
TCW = 700 * TCWcoe[parity]
cBW = 0
if(cBW >= 0){
NEbw = 6.7*cBW*0.88  # NEl equivalence, Mcal/d
} else {
NEbw = 6.7*cBW*0.85
}
# Total net energy requirement
TNEL = NEm + NEl + NEact + NEpreg + NEbw
## Dry matter intake (DMI) estimation
DIM = 100  # Days in milk
if(DIM >100){
DMIest = 2.58 + 0.3 * NEl + 0.027 * BW + 0.05 * cBW - 1.15 * BCS  # DMI, dry matter intake, kg/d
} else {
DMIest = (2.58 + 0.3 * NEl + 0.027 * BW) * (1 - exp(-0.192*((DIM + 3.5)/7 + 3.67)))
}
## peNDF requirement
peNDFreq = 17.1 / (4.32 - Fat_Milk)
## Ca requirement, g/d
Careq = 0.031 * BW + 0.02456*exp((0.05581-0.00007*DOP)*DOP) - 0.02456*exp((0.05581-0.00007*(DOP-1))*(DOP-1)) +
1.22*Milk
## Phosphorus requirement, g/d
# Preq = 1 * DMIest + 0.002 * BW + 0.02743*exp((0.05527 - 0.000075*DOP)*DOP) -
#  0.02743 * exp((0.05527-0.000075*(DOP-1))*(DOP-1)) + 0.9 * Milk
## Protein and amino acids requirements
# AA composition of different protein sources, %
AA_name = c('His','Ile','Leu','Lys','Met','Phe','Thr','Trp','Val')
Microbial = c(2.09, 7.01, 9.20, 9.34, 2.61, 6.44, 6.30, 1.49, 6.95)
Scurf = c(1.65, 2.97, 7.03, 5.58, 1.37, 3.69, 4.05, 0.76, 4.77)
Whole_empty_body = c(2.88, 3.70, 8.39, 7.82, 2.33, 4.51, 4.88, 1.10, 5.28)
Metabolic_fecal = c(3.05, 5.41, 9.31, 7.53, 1.70, 5.39, 7.42, 1.87, 7.17)
Milk_AA = c(2.92, 6.23, 10.55, 8.81, 3.03, 5.26, 4.57, 1.65, 6.97)
Efficiency_AA = c(0.758, 0.676, 0.737, 0.704, 0.711, 0.600, 0.623, 0.860, 0.711)
AA_compostion = data.frame(AA_name, Microbial, Scurf, Whole_empty_body, Metabolic_fecal, Milk_AA, Efficiency_AA)
Efficiency_MP = 0.676
# Scurf requirements
TP_scurf = 0.2 * BW^0.6 * 0.86   #True protein requirement, g/d
AA_scurf = TP_scurf * AA_compostion$Scurf/100   #AA requirement, g/d
# Endogenous urinary
TP_eu = 0.33 * BW
AA_eu = 0.0625 * BW * AA_compostion$Whole_empty_body/100
# Metabolic fecal protein, g/d. MFC cannot be calculated directly without diet information, thus needs to be
# calulated in LP
# TP_MFP = DMIest * (8.5 + 0.1 * NDF_DM)
# AA_MFP = TP_MFP * AA_compostion$Metabolic_fecal/100
# Milk
AA_milk = TP_Milk * Milk/100 * 1000 * AA_compostion$Milk_AA/100
# Pregnancy
TP_preg = CBW * (0.001669 - 0.0000021 * DOP) * exp(0.0278 * DOP - 0.0000176 * DOP^2) * 6.25 * 0.86
AA_preg = TP_preg * AA_compostion$Whole_empty_body/100
#Growth
LWG = 0
TP_growth = LWG * 0.82 * (0.192 - 0.0172 * BW/700) * 0.86
AA_growth = TP_growth * AA_compostion$Whole_empty_body/100
## feed table
feed = read.xlsx(xlsxFile = 'Inputs and feed library for LP simulation - 2019_1.xlsx', sheet = 2)
feed = feed[c(1,2,4,7,8),]
feed$ROM_DM = 100 - feed$Ash_DM - feed$NDF_DM - feed$Starch_DM - (feed$FA_DM)/1.06 - (feed$CP_DM - 0.64*feed$sNPNCP)
feed$RUP_DM = feed$RUP_CP/100 * feed$CP_DM
feed$RDP_DM = feed$CP_DM - feed$RUP_DM
feed$dCP_CP = (feed$RDP_DM + feed$RUP_DM*feed$dRUP_RUP)/feed$CP_DM
## nonlinear programming
# Objective function
mincost <- function(x){
sum(x * feed$Feed_cost)
}
# nonlinear constraints: ME, His, Ile, Leu, Lys, Met, Phe, Thr, Trp, Val
noncon = function(x){
f = numeric(17)
# Energy
dNDF_NDF = 0.12 + 0.61 * feed$IVNDFD_NDF/100 - 0.43 * (sum(x*feed$Starch_DM)/100/sum(x) -0.26) -
3*(sum(x)/BW - 0.035)
dStarch_Starch = feed$dStarch_Starch_base - 1.0*(sum(x)/BW - 0.035)
dFA_FA = feed$dFA_FA_base - 0.8*(sum(x)/BW - 0.035)
efCP_DM = as.vector(0.0116 + 0.0134*sum(x*feed$NDF_DM)/100/sum(x))
DE_DM = feed$NDF_DM * dNDF_NDF/100 * 4.2 + 4.23 * feed$Starch * dStarch_Starch/100 + 4.0 * feed$ROM *
0.96/100 + 9.4* feed$FA * dFA_FA/100 + 5.65 * feed$CP_DM * feed$dCP_CP/100 - 4.00*0.0343 - 5.65 * efCP_DM
GasE = 0.294 * sum(x) - 0.35 * sum(x*feed$FA_DM)/sum(x) + 0.041 * sum(x*(feed$NDF_DM * dNDF_NDF))/sum(x)
UE = (0.00275*BW^0.75  - 0.00813 * (Milk*TP_Milk/0.951/100 + cBW*0.072)*1000/6.25) + 0.0177*
(sum(x*DE_DM) - 5.65 * (0.0116 + 0.0134*sum(x*feed$NDF_DM)/100/sum(x)))+
0.00813 * sum(x*(feed$CP_DM/100 * (feed$dCP_CP - efCP_DM*100/feed$CP_DM))) * 1000 / 6.25
f[1] = sum(x*DE_DM) - GasE - UE - TNEL/0.68
# Amino acids
rdNDF = (-31.9 + 0.721 * sum(x*feed$NDF_DM)/sum(x) -
0.247 * sum(x*feed$Starch_DM)/sum(x) +
6.63 * sum(x*feed$CP_DM)/sum(x) -
0.211 * sum(x*feed$CP_DM/sum(x))^2 -
0.387 * sum(x*feed$ADF_DM) / sum(x*feed$NDF_DM) * 100 +
1.51 * sum(x) - 0.121 * sum(x*feed$WetForage) / sum(x) * 100)/100 * sum(x*feed$NDF_DM)/100
rdStarch = (70.6 - 1.45*sum(x) + 0.424 * sum(x*(feed$NDF_DM * feed$Forage))/sum(x) +
1.39 * sum(feed$Starch_DM * x)/ sum(x) -
0.0219 * (sum(feed$Starch_DM * x) / sum(x))^2 -
0.154 * sum(x*feed$WetForage)/sum(x) * 100)/100 * sum(x*feed$Starch_DM)/100
MCP = (110.7 + (81.6 * sum(x*feed$RDP_DM)/100))/((1 + 0.0939/rdNDF + 0.0274/rdStarch))/1000 * 6.25
MCP_AA = 0.8 * 0.824 * MCP * AA_compostion$Microbial / 100
Feed_His = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$His_CP / 100)) + MCP_AA[1]
Feed_Ile = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Ile_CP / 100)) + MCP_AA[2]
Feed_Leu = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Leu_CP / 100)) + MCP_AA[3]
Feed_Lys = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Lys_CP / 100)) + MCP_AA[4]
Feed_Met = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Met_CP / 100)) + MCP_AA[5]
Feed_Phe = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Phe_CP / 100)) + MCP_AA[6]
Feed_Thr = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Thr_CP / 100)) + MCP_AA[7]
Feed_Trp = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Trp_CP / 100)) + MCP_AA[8]
Feed_Val = sum(x * (feed$CP_DM/100 * feed$RUP_CP/100 * feed$dRUP_RUP * feed$Val_CP / 100)) + MCP_AA[9]
AA_MFP = sum(x) * (8.5 + 0.1 * sum(feed$NDF_DM * x) / sum(x)) * AA_compostion$Metabolic_fecal / 100
AAreq = (AA_scurf + AA_MFP +AA_milk + AA_preg + AA_growth)/Efficiency_AA + AA_eu
AAsup = c(Feed_His, Feed_Ile, Feed_Leu, Feed_Lys, Feed_Met, Feed_Phe, Feed_Thr, Feed_Trp, Feed_Val) * 1000
f[2] = AAsup[1] - AAreq[1]
f[3] = AAsup[2] - AAreq[2]
f[4] = AAsup[3] - AAreq[3]
f[5] = AAsup[4] - AAreq[4]
f[6] = AAsup[5] - AAreq[5]
f[7] = AAsup[6] - AAreq[6]
f[8] = AAsup[7] - AAreq[7]
f[9] = AAsup[8] - AAreq[8]
f[10] = AAsup[9] - AAreq[9]
f[11] = sum(x * (feed$peNDF_NDF * feed$NDF_DM)) - peNDFreq
f[12] = sum(x * (7 - feed$FA_DM))
f[13] = sum(x * (feed$NDF_DM * feed$Forage -17))
f[14] = sum(x * (0.6 - feed$Forage))
f[15] = sum(x * (feed$Ca_DM * feed$dCa_Ca * 10)) - Careq
f[16] = sum(x * (feed$P_DM * feed$dP_P * 10)) - (sum(x) + 0.002 * BW + 0.02743*exp((0.05527 - 0.000075*DOP)*DOP) -
0.02743 * exp((0.05527-0.000075*(DOP-1))*(DOP-1)) + 0.9 * Milk)
f[17] = DMIest - sum(x)
return(f)
}
# Lower bound
lb = rep(0, nrow(feed))
# Solution
s0 = rep(DMIest/nrow(feed), nrow(feed))
sol = slsqp(x0 = s0, fn = mincost, hin = noncon, lower = lb)
sol$solution = sol$par
sol$objval = sol$value
19*5
pbinom(100, size = 104, prob = 0.95)
dbinom(101, size = 104, prob=0.95)
1- pbinom(100, size = 104, prob = 0.95)
library(shiny); runApp('Desktop/Portfolio/Health-Data-Dashboard-EDA-master/Application_Dashboard.R')
library(shiny); runApp('Desktop/Portfolio/Health-Data-Dashboard/Application_Dashboard.R')
runApp('Desktop/Portfolio/Health-Data-Dashboard/Application_Dashboard.R')
library(shiny); runApp('Desktop/Portfolio/Health-Data-Dashboard/Application_Dashboard.R')
library(shiny); runApp('Desktop/Portfolio/Health-Data-Dashboard/Application_Dashboard.R')
count <- rep(0,4)
count
count <- c(1)
i <- 0
print("Count" + str(i) + "is", i, count[i])
print("Count", i, count[i])
print('Count', i, count[i])
i <- 1
print('Count', i, count[i])
setwd("~/Documents/Github/NBA-Model")
library(dplyr)
source("Season_Classes.R")
#list that contains an S4 object for each team
all.teams.data <- c()
teams <- list.files(path=pth)
#Getting all game data from 20201 season
pth <- "~/Documents/Github/NBA-Model/Seasons_Data/2021"
#list that contains an S4 object for each team
all.teams.data <- c()
teams <- list.files(path=pth)
for (t in teams) {
all.teams.data[[t]] = get.team.data(t, '2021')
}
#Getting n-game moving averages at each point in 2021 season
n <- 7
all.teams.nmov.avgs <- c()
for (t in teams) {
print(t)
all.teams.nmov.avgs[[t]] = season.moving.averages(all.teams.data[[t]], n)
}
#Getting season averages at each point in 2021 season
#min.n games to start averaging
min.n <- 5
all.teams.season.avgs <- c()
for (t in teams) {
print(t)
all.teams.season.avgs[[t]] = season.averages(all.teams.data[[t]], min.n)
}
#####PLAYER AVERAGES OVER SEASON
all.player.averages <- get.players.averages("12-22-2020", all.teams.data)
#Getting n-game moving averages at each point in 2021 season
n <- 5
all.teams.nmov.avgs <- c()
for (t in teams) {
print(t)
all.teams.nmov.avgs[[t]] = season.moving.averages(all.teams.data[[t]], n)
}
#function that creates a datframe of predictors vs. prediction for a input team
#to be used in model fitting
#ARG(s):
#Team: Three letter string of input team
#all.teams.data: list of S4 object "All Season Data" for all teams
#all.teams.nmov.avgs: list of S4 objects "N Averages"
#all.player.averages: list of S4 objetcs "All Player Averages"
#n.players: The number of players to average for player averages (by most minutes played)
first <- all.teams.nmov.avgs[['Team']]@team.basic[[1]]
all.teams.nmov.avgs[['BRK']]@team.basic[[1]]
names(all.teams.nmov.avgs[['BRK']]@team.basic)
names(all.teams.nmov.avgs[['BRK']]@team.basic)[1]
first <- names(all.teams.nmov.avgs[['BRK']]@team.basic)[1]
team.stats1 <- all.teams.nmov.avgs[['BRK']]@team.basic[[first]]
team.stats1
View(team.stats1)
team.stats1[[1]]
team.stats1[1]
team.stats1[,1]
team.stats1[1,]
team.stats1[2,]
data.frame(team.stats[2,])
data.frame(team.stats1[2,])
df <- data.frame(team.stats[2,])
df <- data.frame(team.stats1[2,])
df <- df %>% bind_cols(team.stats1[1,])
df
View(df)
?rename_all()
paste('MP', '1')
paste('MP', '1', sep='')
df <- data.frame(team.stats[2,])
rename_all(df, funs(paste(., 'teamop', sep='.')))
df <- data.frame(team.stats1[2,])
df
rename_all(df, funs(paste(., 'teamop', sep='.')))
df
df1 <- data.frame(team.stats[1,]) %>%
rename_all(df1, funs(paste(., 'team-team', sep='.')))
df1 <- data.frame(team.stats1[1,]) %>%
rename_all(df1, funs(paste(., 'team-team', sep='.')))
df1 <- data.frame(team.stats1[1,]) %>%
rename_all(funs(paste(., 'team-team', sep='.')))
df1
View(df1)
df1 <- data.frame(team.stats1[1,]) %>%
rename_all(funs(paste(., 't-t', sep='.')))
df2 <- data.frame(team.stats1[2,]) %>%
rename_all(funs(paste(., 't-o', sep='.')))
df <- bind_cols(df1, df2)
df
View(df)
df1 <- data.frame(team.stats1[1,]) %>%
rename_all(funs(paste(., 't-t', sep='.'))) %>%
select(-c('Type.t-t'))
View(df1)
team.stats.a <- all.teams.nmov.avgs$BRK@team.advanced$`01-01-2021`
team.stats.b <- all.teams.nmov.avgs$BRK@team.basic$`01-01-2021`
df1 <- data.frame(team.stats.b[1,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-t', sep='.'))) %>%
df2 <- data.frame(team.stats.a[1,]) %>%
rename_all(funs(paste(., 't-t')))
df1 <- data.frame(team.stats.b[1,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-t', sep='.'))) %>%
df2 <- data.frame(team.stats.a[1,]) %>%
rename_all(funs(paste(., 't-t')))
df1 <- data.frame(team.stats.b[1,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-t', sep='.')))
View(df1)
view(team.stats.a)
View(team.stats.a)
df2 <- data.frame(team.stats.a[1,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-t', sep='.')))
View(df2)
df1 <- data.frame(team.stats.b[1,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-t', sep='.')))
df2 <- data.frame(team.stats.a[1,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-t', sep='.')))
df3 <- data.frame(team.stats.b[2,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-o', sep='.')))
df4 <- data.frame(team.stats.a[2,]) %>%
select(-c('Type')) %>%
rename_all(funs(paste(., 't-o', sep='.')))
df <- bind_cols(df1, df2, df3, df4)
View(df)
