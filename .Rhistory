#date: string input of what game to compute average prior to ("MM-DD-YYYY")
#n: number of most recent games for this moving average
#dates of n most recent games from date
dates <- n.past.games(team.data, date, n)
#creating data.frames to store rows for each game used in computing average
b.team.df <- tibble(team.data@team.basic[[dates[1]]][1,])
b.opponent.df <- tibble(team.data@team.basic[[dates[1]]][2,])
a.team.df <- tibble(team.data@team.advanced[[dates[1]]][1,])
a.opponent.df <- tibble(team.data@team.advanced[[dates[1]]][2,])
#adding rows to data.frames
for (i in 2:n) {
b.team.df <- b.team.df %>%
add_row(team.data@team.basic[[dates[i]]][1,])
b.opponent.df <- b.opponent.df %>%
add_row(team.data@team.basic[[dates[i]]][2,])
a.team.df <- a.team.df %>%
add_row(team.data@team.advanced[[dates[i]]][1,])
a.opponent.df %>%
add_row(team.data@team.advanced[[dates[i]]][2,])
}
#averaging basic stats for both team and opponent
b.df <- summarise_all(b.team.df[-c(1,2)],mean)
b.df <- b.df %>%
add_row(summarise_all(b.opponent.df[-c(1,2)],mean))
b.df$Type = c('Team', 'Opponent')
b.df2 <- b.df %>%
select(Type, everything())
#averaging advanced stats for both team and opponent
a.df <- summarise_all(a.team.df[-c(1,2)],mean)
a.df <- a.df %>%
add_row(summarise_all(a.opponent.df[-c(1,2)],mean))
a.df$Type = c('Team', 'Opponent')
a.df2 <- a.df %>%
select(Type, everything())
return (list(b.df2, a.df2))
}
l.df <- compute.moving.avg(all.teams.data$BRK, "02-21-2021", 20)
all.teams.data['BRK']
all.teams.data[['BRK']]
length(all.teams.data$ATL@team.basic)
Sys.Date()
paste(substr(Sys.Date(), 6,7), substr(Sys.Date(9,10), substr(Sys.Date(1,4)), sep='-')
)
paste(substr(Sys.Date(), 6,7), substr(Sys.Date(9,10)), substr(Sys.Date(1,4)), sep='-')
paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10), substr(Sys.Date(),1,4), sep='-')
class(4)
#Team Averages Class for storing team averages at each point in season
#SLOTS:
#basic: list of basic teams data moving averages across the season
#advanced: list of advanced teams data moving averages across the season
setClass("Team Averages", slots=list(name = "character", n = "numeric"
basic = "list", advanced = "list"))
#Team Averages Class for storing team averages at each point in season
#SLOTS:
#basic: list of basic teams data moving averages across the season
#advanced: list of advanced teams data moving averages across the season
setClass("Team Averages", slots=list(name = "character", n = "numeric"
basic = "list", advanced = "list"))
#Team Averages Class for storing team averages at each point in season
#SLOTS:
#basic: list of basic teams data moving averages across the season
#advanced: list of advanced teams data moving averages across the season
setClass("Team Averages", slots=list(name = "character", n = "numeric",
basic = "list", advanced = "list"))
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in n+1:num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- avgs[[1]]
a.avgs[[i-n]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
NULL
NULL == '01'
TRUE
logical(0)
'01' == '01'
####Functions and Classes for Getting Moving Averages Information####
prev.day <- function(date) {
#function takes an input of date "MM-DD-YY format
#and returns the previous day in same character format
#Months with 31 days
m.31 <- c('01', '03', '05', '07', '08', '10', '12')
#Months with 30 days
m.30 <- c('02', '04', '06', '09', '11')
#condition if entering a new month
print(date)
if (substr(date,4, 5 ) == '01') {
#Updating month string
#condition if going from January to December
if (substr(date,1,2) == '01') {
substr(date, 1,2) <- '12'
substr(date,7,10) <- as.character(as.numeric(substr(date,7,10)) - 1)
}
#condition for staying a double digit month
else if (as.numeric(substr(date,1,2)) > 10){
substr(date, 1,2) <- as.character(as.integer(substr(date,1,2)) -1)
}
#else
else {
substr(date, 1,2) <- paste('0', as.character(as.integer(substr(date,1,2))-1),sep='')
}
#Updating Days
if (substr(date,1,2) %in% m.31) {
substr(date, 4,5) <- '31'
}
else if (substr(date,1,2) %in% m.30) {
substr(date, 4,5) <- '30'
}
#February
else {
if (as.integer(substr(date,7,10)) %% 4 == 0 ) {
substr(date, 4,5) <- '29'
}
else {
substr(date, 4,5) <- '28'
}
}
}
#else staying in same month
else {
if (as.numeric(substr(date,4,5)) > 10) {
substr(date, 4,5) <- as.character(as.integer(substr(date,4, 5 )) - 1)
}
else {
substr(date, 4,5) <- paste('0', as.character(as.integer(substr(date,4,5))-1),sep='')
}
}
return (date)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
####Functions and Classes for Getting Moving Averages Information####
prev.day <- function(date) {
#function takes an input of date "MM-DD-YY format
#and returns the previous day in same character format
#Months with 31 days
m.31 <- c('01', '03', '05', '07', '08', '10', '12')
#Months with 30 days
m.30 <- c('02', '04', '06', '09', '11')
#condition if entering a new month
if (substr(date,4, 5 ) == '01') {
#Updating month string
#condition if going from January to December
if (substr(date,1,2) == '01') {
substr(date, 1,2) <- '12'
substr(date,7,10) <- as.character(as.numeric(substr(date,7,10)) - 1)
}
#condition for staying a double digit month
else if (as.numeric(substr(date,1,2)) > 10){
substr(date, 1,2) <- as.character(as.integer(substr(date,1,2)) -1)
}
#else
else {
substr(date, 1,2) <- paste('0', as.character(as.integer(substr(date,1,2))-1),sep='')
}
#Updating Days
if (substr(date,1,2) %in% m.31) {
substr(date, 4,5) <- '31'
}
else if (substr(date,1,2) %in% m.30) {
substr(date, 4,5) <- '30'
}
#February
else {
if (as.integer(substr(date,7,10)) %% 4 == 0 ) {
substr(date, 4,5) <- '29'
}
else {
substr(date, 4,5) <- '28'
}
}
}
#else staying in same month
else {
if (as.numeric(substr(date,4,5)) > 10) {
substr(date, 4,5) <- as.character(as.integer(substr(date,4, 5 )) - 1)
}
else {
substr(date, 4,5) <- paste('0', as.character(as.integer(substr(date,4,5))-1),sep='')
}
}
return (date)
}
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in n+1:num) {
print(games[i])
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- avgs[[1]]
a.avgs[[i-n]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
print(games)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in n+1:num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- avgs[[1]]
a.avgs[[i-n]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
print(length(games))
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in n+1:num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- avgs[[1]]
a.avgs[[i-n]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in (n+1):num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- avgs[[1]]
a.avgs[[i-n]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
all.teams.data$ATL@name
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in (n+1):num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- avgs[[1]]
a.avgs[[i-n]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team.data@name, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
ahhh@basic
all.teams.data$ATL@player.basic
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in (n+1):num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- tibble(avgs[[1]])
a.avgs[[i-n]] <- tibble(avgs[[2]])
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team.data@name, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
ahhh@basic
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in (n+1):num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[i-n]] <- as.data.frame((avgs[[1]]))
a.avgs[[i-n]] <- as.data.frame((avgs[[2]]))
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team.data@name, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
ahhh@basic
get.team.data <- function(team, season) {
#function that searches through a specified NBA team games (in a specified season)
#and executes processes for storing information in a S4 R class object ('All Data')
pth <- paste("~/Documents/Github/NBA-Model/Seasons_Data", season, team, sep='/')
#empty containers for box score data
b.player <- c()
a.player <- c()
b.teams <- c()
a.teams <- c()
months <- list.files(path=pth)
#iterating through months these teams played
for (m in months) {
games <- list.files(path=paste(pth, m, sep='/'))
for (g in games) {
b.player[[g]] = read.csv(paste(pth, m, g, "basic_player_data.csv", sep='/'))
a.player[[g]] = read.csv(paste(pth, m, g, "advanced_player_data.csv", sep='/'))
b.teams[[g]] = read.csv(paste(pth, m, g, "teams_basic_data.csv", sep='/'))
a.teams[[g]] = read.csv(paste(pth, m, g, "teams_advanced_data.csv", sep='/'))
}
}
print(class(b.player))
#S4 class object: "Team Data"
s4 <- new("All Data", name = team, player.basic = b.player, player.advanced = a.player,
team.basic = b.teams, team.advanced = a.teams)
return (s4)
}
#Getting all game data from 20201 season
pth <- "~/Documents/Github/NBA-Model/Seasons_Data/2021"
#list that contains an S4 object for each team
all.teams.data <- c()
teams <- list.files(path=pth)
for (t in teams) {
all.teams.data[[t]] = get.team.data(t, '2021')
}
get.team.data <- function(team, season) {
#function that searches through a specified NBA team games (in a specified season)
#and executes processes for storing information in a S4 R class object ('All Data')
pth <- paste("~/Documents/Github/NBA-Model/Seasons_Data", season, team, sep='/')
#empty containers for box score data
b.player <- c()
a.player <- c()
b.teams <- c()
a.teams <- c()
months <- list.files(path=pth)
#iterating through months these teams played
for (m in months) {
games <- list.files(path=paste(pth, m, sep='/'))
for (g in games) {
b.player[[g]] = read.csv(paste(pth, m, g, "basic_player_data.csv", sep='/'))
print(class(read.csv(paste(pth, m, g, "basic_player_data.csv", sep='/'))))
a.player[[g]] = read.csv(paste(pth, m, g, "advanced_player_data.csv", sep='/'))
b.teams[[g]] = read.csv(paste(pth, m, g, "teams_basic_data.csv", sep='/'))
a.teams[[g]] = read.csv(paste(pth, m, g, "teams_advanced_data.csv", sep='/'))
}
}
#S4 class object: "Team Data"
s4 <- new("All Data", name = team, player.basic = b.player, player.advanced = a.player,
team.basic = b.teams, team.advanced = a.teams)
return (s4)
}
#Getting all game data from 20201 season
pth <- "~/Documents/Github/NBA-Model/Seasons_Data/2021"
#list that contains an S4 object for each team
all.teams.data <- c()
teams <- list.files(path=pth)
for (t in teams) {
all.teams.data[[t]] = get.team.data(t, '2021')
}
get.team.data <- function(team, season) {
#function that searches through a specified NBA team games (in a specified season)
#and executes processes for storing information in a S4 R class object ('All Data')
pth <- paste("~/Documents/Github/NBA-Model/Seasons_Data", season, team, sep='/')
#empty containers for box score data
b.player <- c()
a.player <- c()
b.teams <- c()
a.teams <- c()
months <- list.files(path=pth)
#iterating through months these teams played
for (m in months) {
games <- list.files(path=paste(pth, m, sep='/'))
for (g in games) {
b.player[[g]] = read.csv(paste(pth, m, g, "basic_player_data.csv", sep='/'))
a.player[[g]] = read.csv(paste(pth, m, g, "advanced_player_data.csv", sep='/'))
b.teams[[g]] = read.csv(paste(pth, m, g, "teams_basic_data.csv", sep='/'))
a.teams[[g]] = read.csv(paste(pth, m, g, "teams_advanced_data.csv", sep='/'))
}
}
#S4 class object: "Team Data"
s4 <- new("All Data", name = team, player.basic = b.player, player.advanced = a.player,
team.basic = b.teams, team.advanced = a.teams)
return (s4)
}
#Getting all game data from 20201 season
pth <- "~/Documents/Github/NBA-Model/Seasons_Data/2021"
#list that contains an S4 object for each team
all.teams.data <- c()
teams <- list.files(path=pth)
for (t in teams) {
all.teams.data[[t]] = get.team.data(t, '2021')
}
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in (n+1):num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[games[i]] <- avgs[[1]]
a.avgs[games[i]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team.data@name, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
warnings()
ahhh@basic$`01-01-2021`
ahhh@basic
###Function for setting a teams moving averages (over n games) prior to every
#game in the season (thus far)
team.season.moving.averages <- function(team.data, n) {
#team: 3 letter character representation of the team
#n: number of games to compute moving average off of
num <- length(team.data@team.basic)
current.date <- paste(substr(Sys.Date(), 6,7), substr(Sys.Date(),9,10),
substr(Sys.Date(),1,4), sep='-')
games <- n.past.games(team.data, current.date, num)
#list of team basic averages
b.avgs <- c()
a.avgs <- c()
for (i in (n+1):num) {
avgs <- compute.moving.avg(team.data, games[i], n)
b.avgs[[games[i]]] <- avgs[[1]]
a.avgs[[games[i]]] <- avgs[[2]]
}
#S4 class object of Team Averages
s4 <- new("Team Averages", name = team.data@name, n = n, basic = b.avgs, advanced=a.avgs)
return (s4)
}
ahhh <- team.season.moving.averages(all.teams.data$BRK, 5)
ahhh@basic$`03-21-2021`
ahhh@basic$`01-16-2021`
ahhh <- team.season.moving.averages(all.teams.data$BRK, 10)
ahhh@basic$`01-23-2021`
